{
  "_index": "items",
  "_type": "items",
  "_id": "51da855e31202f52dc003249f2f6c8d2ebb53826",
  "_score": 0.39688137,
  "_source": {
    "timestamp": 1573333230.081518,
    "classified_fields_filtered": null,
    "category": "message",
    "job_id": "5ab2b9bb-4695-436c-a49f-dd114d3bd1a9",
    "uuid": "51da855e31202f52dc003249f2f6c8d2ebb53826",
    "arthur_version": "0.1.18",
    "origin": "https://lists.linuxfoundation.org/pipermail/grimoirelab-discussions/",
    "backend_version": "0.10.0",
    "perceval_version": "0.12.24",
    "tag": "https://lists.linuxfoundation.org/pipermail/grimoirelab-discussions/",
    "backend_name": "Pipermail",
    "search_fields": {
      "item_id": "<a9ad1f8fe8b8bca30ff58b98942d853bd6004524.camel@bitergia.com>"
    },
    "data": {
      "References": "<3c4cbc139f31973d31e70b48d38194ed15a24136.camel@bitergia.com>",
      "In-Reply-To": "<3c4cbc139f31973d31e70b48d38194ed15a24136.camel@bitergia.com>",
      "unixfrom": "jgb at bitergia.com  Fri Feb 22 10:54:33 2019",
      "Date": "Fri, 22 Feb 2019 11:54:33 +0100",
      "From": "jgb at bitergia.com (Jesus M. Gonzalez-Barahona)",
      "Subject": "[GrimoireLab-disc] Proposal for a new module in GrimoireLab:\n Graal",
      "Message-ID": "<a9ad1f8fe8b8bca30ff58b98942d853bd6004524.camel@bitergia.com>",
      "body": {
        "plain": "If I'm not wrong, this proposal got four +1 by maintainers, and no 0 or\n-1, so we will be moving the repo to chaoss/grimoirelab-graal asap.\n\nSaludos,\n\n\tJesus.\n\nOn Wed, 2019-01-30 at 10:47 +0100, Jesus M. Gonzalez-Barahona wrote:\n> Hi all,\n> \n> This message is a formal proposal for adding Graal as a new module,\n> part of GrimoireLab.\n> \n> Graal currently lives at https://github.com/Bitergia/Graal\n> \n> Graal works with data from Perceval, and produces data that can be\n> easily consumed by GrimoireELK and the rest of the GrimoireLab\n> pipeline. Graal adds for the first time to GrimoireLab capabilities\n> related to source code analysis and licensing analysis, by running\n> third party tools.\n> \n> Some more information about Graal (from its README) below.\n> \n> Please, let us know if you support this proposal or not.\n> \n> Saludos,\n> \n> \tJesus.\n> \n> --------------------------------------------\n> Graal: a Generic Repository AnALyzer Build Status Coverage Status\n> \n> Graal leverages on the Git backend of Perceval and enhances it to set\n> up ad-hoc source code analysis. Thus, it fetches the commits from a\n> Git\n> repository and provides a mechanism to plug third party\n> tools/libraries\n> focused on source code analysis.\n> \n> How it works\n> \n> The Perceval Git backend creates a local mirror of a Git repository\n> (local or remote), fetches the metadata of commits in chronological\n> order and returns them as a list of JSON documents (one per commit).\n> Graal leverages on the incremental functionalities provided by the\n> Git\n> backend and enhances the logic to handle Git repositories by creating\n> a\n> working tree to perform checkout operations (which are not possible\n> on\n> a Git mirror). Graal intercepts each JSON document and enables the\n> user\n> to perform the following steps:\n> \n> * Filter. The filtering is used to select or discard commits based on\n> the information available in the JSON document and/or via the Graal\n> parameters. For any selected commit, Graal executes a checkout on the\n> working tree using the commit hash, thus setting the state of the\n> working tree at that given revision.\n> \n> * Analyze. The analysis takes the JSON document and the current\n> working\n> tree and enables the user to set up ad-hoc source code analysis by\n> plugging existing tools through system calls or their Python\n> interfaces, when possible. The results of the analysis are parsed and\n> manipulated by the user and then automatically embedded in the JSON\n> document. It is worth noting that in this step the user can rely on\n> some predefined functionalities of Graal to deal with the repository\n> snapshot (e.g., listing files, creating archives).\n> \n> * Post-process. In the final step, the inflated JSON document can be\n> optionally processed to alter (e.g., renaming, removing) its\n> attributes, thus granting the user complete control over the output\n> of\n> Graal executions.\n> \n> Several parameters (inherited from the Git backend) are available to\n> control the execution; for instance, from_date and to_date allow to\n> select commits authored since and before a given date, branches\n> allows\n> to fetch commits only from specific branches, and latest_items\n> returns\n> only those commits which are new since the last fetch operation.\n> Graal\n> includes additional parameters to drive the analysis to filter in/out\n> files and directories in the repository (in_paths and out_paths), set\n> the entrypoint and define the details level of the analysis (useful\n> when analyzing large software projects).\n> \n> \n-- \nBitergia: http://bitergia.com\n/me at Twitter: https://twitter.com/jgbarah\n\n\n"
      }
    },
    "updated_on": 1550832873
  }
}
